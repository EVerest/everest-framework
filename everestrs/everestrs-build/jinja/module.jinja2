mod generated {

#![allow(
    clippy::let_unit_value,
    clippy::match_single_binding,
    clippy::upper_case_acronyms,
    clippy::useless_conversion,
    dead_code,
    non_camel_case_types,
    unused_mut,
    unused_variables,
    unused_imports,
)]

use everestrs::serde_json as __serde_json;

pub mod types {
{% include "types" %}
}

{% include "config" %}

/// Called when the module receives on_ready from EVerest.
pub(crate) trait OnReadySubscriber: Sync + Send {
    fn on_ready(&self, pub_impl: &ModulePublisher);
}

{% for trait in provided_interfaces %}
{% include "service" %}
{% endfor %}

{% for trait in required_interfaces %}
{% include "client" %}
{% endfor %}

#[cfg_attr(any(not(test), not(feature = "mockall")), derive(Clone))]
#[cfg_attr(all(test, feature = "mockall"), derive(Default))]
pub(crate) struct ModulePublisher {
{% for provide in provides %}
   pub(crate) {{ provide.implementation_id | identifier }}: {{provide.interface | title}}ServicePublisher,
{% endfor %}
{% for require in requires %}
    {% if require.min_connections == 1 and require.max_connections == 1 %}
   pub(crate) {{ require.implementation_id | identifier }}: {{require.interface | title}}ClientPublisher,
    {% elif require.min_connections == require.max_connections %}
   pub(crate) {{ require.implementation_id | identifier }}_slots: [{{ require.interface | title}}ClientPublisher; {{require.min_connections}}],
    {% else %}
   pub(crate) {{ require.implementation_id | identifier }}_slots: Vec<{{require.interface | title}}ClientPublisher>,
    {% endif %}
{% endfor %}
}

pub(crate) struct Module {
    on_ready: ::std::sync::Arc<dyn OnReadySubscriber>,
{% for provide in provides %}
   {{ provide.implementation_id | identifier }}: ::std::sync::Arc<dyn {{provide.interface | title}}ServiceSubscriber>,
{% endfor %}
{% for require in requires %}
   {{ require.implementation_id | identifier }}: ::std::sync::Arc<dyn {{require.interface | title}}ClientSubscriber>,
{% endfor %}

    publisher: ModulePublisher,
}

/// The context structure.
pub(crate) struct Context<'a> {
    pub(crate) publisher: &'a ModulePublisher,
    {# TODO(ddo) Clarify the naming. #}
    /// The name as in `implementation_id`.
    pub name: &'a str,
    /// The index of the slot.
    pub index: usize,
}

impl Module {
    #[must_use]
    pub(crate) fn new(
        on_ready: ::std::sync::Arc<dyn OnReadySubscriber>,
{% for provide in provides %}
        {{ provide.implementation_id | identifier }}: ::std::sync::Arc<dyn {{provide.interface | title}}ServiceSubscriber>,
{% endfor %}
{% for require in requires %}
      {{ require.implementation_id | identifier }}: ::std::sync::Arc<dyn {{require.interface | title}}ClientSubscriber>,
{% endfor %}
    ) -> ::std::sync::Arc<Self> {
        let runtime = ::everestrs::Runtime::new();
        let this = ::std::sync::Arc::new(Self {
            on_ready,
{% for provide in provides %}
            {{ provide.implementation_id | identifier }},
{% endfor %}
{% for require in requires %}
            {{ require.implementation_id | identifier }},
{% endfor %}
            #[cfg(any(not(test), not(feature = "mockall")))]
            publisher: {
                let connections = ::everestrs::get_module_connections();
                ModulePublisher {
{% for provide in provides %}
   {{ provide.implementation_id | identifier }}: {{provide.interface | title}}ServicePublisher {
      implementation_id: "{{ provide.implementation_id }}",
      runtime: runtime.clone(),
    },
{% endfor %}
{% for require in requires %}
    {% if require.min_connections == 1 and require.max_connections == 1 %}
        {{ require.implementation_id | identifier }}: {{require.interface | title}}ClientPublisher {
            implementation_id: "{{ require.implementation_id }}",
            runtime: runtime.clone(),
            index: 0,
        },
    {% elif require.min_connections == require.max_connections %}
        {{ require.implementation_id | identifier }}_slots: ::core::array::from_fn(|i| {{require.interface | title}}ClientPublisher{
            implementation_id: "{{ require.implementation_id }}",
            runtime: runtime.clone(),
            index: i,
        }),
    {% else %}
        {{ require.implementation_id | identifier }}_slots: (0..connections.get("{{require.implementation_id}}").cloned().unwrap_or(0)).map(|i| {{require.interface | title}}ClientPublisher{
            implementation_id: "{{ require.implementation_id }}",
            runtime: runtime.clone(),
            index: i,
        }).collect(),
    {% endif %}
{% endfor %}
                }
            },
            #[cfg(all(test, feature = "mockall"))]
            publisher: ModulePublisher::default(),
        });

        runtime.as_ref().set_subscriber(::std::sync::Arc::<Module>::downgrade(&this));
        this
    }
}

impl ::everestrs::Subscriber for Module {
    fn handle_command(
        &self,
        implementation_id: &str,
        name: &str,
        parameters: ::std::collections::HashMap<String, __serde_json::Value>,
    ) -> ::everestrs::Result<__serde_json::Value> {
        let context = Context {
            publisher: &self.publisher,
            name: implementation_id,
            index: 0,
        };
        match implementation_id {
{% for provide in provides %}
    "{{ provide.implementation_id }}" => {
        dispatch_command_to_{{ provide.interface | snake }}(&context, self.{{ provide.implementation_id | identifier }}.as_ref(), name, parameters)
    },
{% endfor %}
            _ => Err(::everestrs::Error::InvalidArgument(
                "Unknown implementation_id called.",
            )),
        }
    }

    fn handle_variable(
        &self,
        implementation_id: &str,
        index: usize,
        name: &str,
        value: __serde_json::Value,
    ) -> ::everestrs::Result<()> {
        let context = Context {
            publisher: &self.publisher,
            name: implementation_id,
            index,
        };
        match implementation_id {
{% for req in requires %}
    "{{ req.implementation_id }}" => {
         dispatch_variable_to_{{ req.interface | snake }}(&context, self.{{ req.implementation_id  | identifier }}.as_ref(), name, value)
    },
{% endfor %}
      _ => Err(::everestrs::Error::InvalidArgument(
                  "Unknown variable received.",
              ))
        }
    }

    fn on_ready(&self) {
        self.on_ready.on_ready(&self.publisher)
    }
}

}
