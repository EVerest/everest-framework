{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "description": "Json schema for EVerest interface files",
    "$defs": {
        // all subschemas can not use allOf with the draft-07 schema because that will cause our validator to
        // add all draft-07 default values which never validate (the {"not": true} default contradicts everything)
        // --> validating against draft-07 will be done in an extra step in config.cpp
        "var_subschema": {
            "type": "object",
            "required": [
                "type",
                "description"
            ], // require at least a type declaration for this command/result schema
            "properties": {
                "type": {
                    "type": [
                        "array",
                        "string"
                    ]
                },
                "description": {
                    "type": "string",
                    "minLength": 2
                },
                "default": false            // we don't allow default values
            },
            "additionalProperties": true    // allow all sorts of entries (should be a json schema!)
        },
        "cmd_arguments_subschema": {
            "type": "object",
            "patternProperties": {
                "^[a-zA-Z_][a-zA-Z0-9_.-]*$": { // arbitrary argument name
                    "type": "object",
                    "required": [
                        "type",
                        "description"
                    ], // require at least a type declaration for this command/result schema
                    "properties": {
                        "type": {
                            "type": [
                                "array",
                                "string"
                            ]
                        },
                        "description": {
                            "type": "string",
                            "minLength": 2
                        },
                        "default": false            // we don't allow default values
                    },
                    "additionalProperties": true    // allow all sorts of entries (should be a json schema!)
                }
            },
            "additionalProperties": false,          // only allow argument names conforming to our pattern above
            "default": {}
        },
        "cmd_result_subschema": {
            "type": "object",
            "required": [
                "type",
                "description"
            ], // require at least a type declaration for this command/result schema
            "properties": {
                "type": {
                    "type": [
                        "array",
                        "string"
                    ]
                },
                "description": {
                    "type": "string",
                    "minLength": 2
                },
                "default": false             // we don't allow default values
            },
            "additionalProperties": true,    // allow all sorts of entries (should be a json schema!)
            "default": {
                "type": "null",
                "description": "This returns nothing"
            }
        }
    },
    "type": "object",
    "required": [
        "description"
    ],
    "properties": {
        "description": {
            "type": "string",
            "minLength": 2
        },
        "parent": {
            "description": "This defines the parent interface for inheritance",
            "type": [
                "string"
            ],
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_.-]*$",
            "minLength": 3
        },
        "cmds": {
            "description": "This describes a list of commands for this unit having arguments and result declared as json schema",
            "type": "object",
            "patternProperties": {
                "^[a-zA-Z_][a-zA-Z0-9_.-]*$": { // arbitrary command name
                    "type": "object",
                    "description": "the keys 'arguments' and 'result' declare json schemas defining the arguments and result for this command (default: 'type': 'null')",
                    "required": [
                        "description"
                    ],
                    "properties": {
                        "description": {
                            "type": "string",
                            "minLength": 2
                        },
                        // default is an empty arguments/result list
                        "arguments": {
                            "$ref": "#/$defs/cmd_arguments_subschema"
                        },
                        "result": {
                            "$ref": "#/$defs/cmd_result_subschema"
                        }
                    },
                    "default": {},
                    "additionalProperties": false // don't allow arbitrary additional properties
                }
            },
            "additionalProperties": false, // don't allow arbitrary additional properties
            "default": {} // add empty cmds if not already present
        },
        "vars": {
            "description": "This describes a list of exported variables of this unit",
            "type": "object",
            "patternProperties": {
                "^[a-zA-Z_][a-zA-Z0-9_.-]*$": { // arbitrary variable name
                    "description": "json schema declaring the contents of the variables exported by this unit",
                    "$ref": "#/$defs/var_subschema"
                }
            },
            "additionalProperties": false, // don't allow arbitrary additional properties
            "default": {} // add empty vars if not already present
        }
    },
    "additionalProperties": false
}
